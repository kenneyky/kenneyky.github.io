{"version":3,"sources":["features/portfolio/NavBar.tsx","features/portfolio/Heading.tsx","features/portfolio/AboutMe.tsx","features/portfolio/Projects.tsx","features/portfolio/ContactMe.tsx","features/portfolio/Portfolio.tsx","features/stocks/Stocks.tsx","features/sp500/SP500.tsx","features/coronavirus/Coronavirus.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","Navbar","fixed","bg","variant","Brand","href","Nav","className","Link","Collapse","Icon","name","size","Heading","Segment","id","inverted","vertical","textAlign","style","minHeight","padding","Container","text","Image","circular","centered","src","Header","as","content","fontSize","fontWeight","AboutMe","Projects","Card","Group","image","link","header","description","ContactMe","Content","Portfolio","Stocks","useState","stock","setStock","open","setOpen","ticker","setTicker","Form","onSubmit","event","preventDefault","console","log","Axios","get","process","then","response","data","catch","err","alert","Field","inline","Input","onChange","e","target","value","placeholder","Modal","onClose","onOpen","trigger","Button","type","margin","imageURL","wrapped","Description","previousClose","currentPrice","color","Statistic","Value","Label","yearHigh","yearLow","Actions","onClick","SP500","SP500obj","setSP500","useEffect","fluid","clearing","dividing","Subheader","indexes","map","index","changePercent","Table","celled","compact","unstackable","Row","HeaderCell","Body","stocks","Cell","toFixed","marketCap","toLocaleString","Coronavirus","coronas","setCoronas","latestCases","setLatestCases","FlexibleXyPlot","makeWidthFlexible","XYPlot","confirmed","deaths","recovered","active","forEach","push","x","Date","parse","y","Confirmed","Deaths","Recovered","Active","ConfirmedList","DeathsList","RecoveredList","ActiveList","pop","paddingTop","xType","height","width","left","title","min-width","horizontal","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.31487285.chunk.js","sourcesContent":["import React from 'react'\n\nimport {Navbar, Nav} from 'react-bootstrap'\nimport { Icon } from 'semantic-ui-react';\n\n\nexport const NavBar = () => {\n    return (\n\n        <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#Home\">Kyle</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#About_Me\">About Me</Nav.Link>\n                <Nav.Link href=\"#Projects\">Projects</Nav.Link>\n                <Nav.Link href=\"#Contact_Me\">Contact Me</Nav.Link>\n            </Nav>\n            <Navbar.Collapse className=\"justify-content-end\">\n                    <a href=\"https://github.com/kenneyky\">\n                         <Icon name=\"github\" size=\"large\" />\n                     </a>\n                     <a href=\"https://linkedin.com/in/kenneyky\">\n                         <Icon name=\"linkedin\" size='large' />\n                     </a>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n","import React from 'react'\nimport {Container, Header, Image, Segment} from 'semantic-ui-react'\n\nexport const Heading = () => {\n    return (\n            <Segment \n            id=\"Home\"\n            inverted\n            vertical\n            textAlign=\"center\"\n            style={{minHeight: 700, padding: '8em 0em'}}>\n            <Container text>\n                <Image circular centered size='medium' src='/assets/portfolio/kyle.jpg'/>\n                <Header\n                    inverted\n                    as='h1'\n                    content=\"Kyle Kenney\"\n                    style={{\n                        fontSize: '4em',\n                        fontWeight: 'normal',\n                    }}\n                />\n                <Header\n                    inverted\n                    as='h2'\n                    content=\"Software Engineer in Vienna, VA\"\n                />\n            </Container>\n\n        \n        </Segment>\n    )\n}\n","import React from 'react'\nimport {Container, Segment, Header} from 'semantic-ui-react'\n\nexport const AboutMe = () => {\n    return (\n        <div id=\"About_Me\">\n            <Segment \n                vertical\n                textAlign=\"center\"\n                style={{padding: '8em 0em'}}\n                id=\"About_Me\"\n                >\n                <Container>\n                    <Header as='h1'  style={{ fontSize: '2em' , padding: '0em 2em'}}>\n                        About Me\n                    </Header>\n                    <p style={{fontSize: '1.33em'}}>\n                        I am a full-stack software engineer located in Vienna, VA.\n                        I am a driven hard-worker who is passionate about solving problems through software development.\n                    </p>\n\n                    <p style={{fontSize: '1.33em'}}>\n                        I have received my BS from Central Washington University in CS from Ellensburg, WA.\n                        I currently work as a software development engineer for Leidos in Vienna, VA.\n                        Take a look at some of my projects below!\n                    </p>\n                </Container>\n            </Segment>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Segment, Card, Header} from 'semantic-ui-react'\n\nimport {Container} from 'react-bootstrap'\n\nexport const Projects = () => {\n    return (\n        <Segment \n            inverted\n            vertical \n            textAlign=\"center\"\n            style={{padding: '8em 0em'}}\n            id=\"Projects\"\n        >\n            <Container>\n                <Header\n                as=\"h1\"\n                inverted\n                >\n                    Projects\n                </Header>\n                <Card.Group centered>\n                    <Card \n                        image=\"/assets/portfolio/stock-app.PNG\"\n                        link\n                        header='Stock Lookup'\n                        href=\"/stocks\"\n                        description='A simple application that looks up stocks by their symbol.'\n                    />\n                    <Card \n                        image=\"/assets/portfolio/sp500-app.PNG\"\n                        link\n                        header='SP500'\n                        href=\"/sp500\"\n                        description='An in depth look at the sp500 and the companies that are a part of it.'\n                    />\n                    <Card \n                        image=\"/assets/portfolio/Coronavirus.PNG\"\n                        link\n                        header='US Coronavirus Cases'\n                        href=\"/corona\"\n                        description='Page Displaying Coronavirus data within the US'\n                    />\n                </Card.Group>\n                \n            </Container>\n            \n        </Segment>\n    )\n}\n","import React from 'react'\nimport {Card, Container, Header, Image, Segment} from 'semantic-ui-react'\n\nexport const ContactMe = () => {\n    return (\n        <Segment \n        vertical \n        style={{padding: '8em 0em'}}\n        id=\"Contact_Me\"\n        >\n            <Container textAlign=\"center\">\n                <Header\n                as=\"h1\"\n                textAlign='center'\n                >\n                    Contact Me\n                </Header>\n                <p style={{fontSize: '1.33em'}}>\n                    If you would like to contact me, feel free to message me on LinkedIn!\n                </p>\n\n                <Card centered\n                    link\n                    href=\"https://linkedin.com/in/kenneyky\"\n                >\n                    <Image src='/assets/portfolio/LI-In-Bug.png'/>\n                    <Card.Content>\n                        <Card.Header>Go To LinkedIn Page</Card.Header>\n                    </Card.Content>\n                    \n                </Card>\n            </Container>\n            \n        </Segment>\n    )\n}\n","import React from 'react'\nimport { NavBar } from './NavBar'\nimport { Heading } from './Heading'\nimport { Container } from 'react-bootstrap'\nimport { AboutMe } from './AboutMe'\nimport { Projects } from './Projects'\nimport { ContactMe } from './ContactMe'\n\nexport const Portfolio = () => {\n    return (\n        <Container>\n            <NavBar />\n            <Heading />\n            <AboutMe />\n            <Projects />\n            <ContactMe />\n        </Container>\n    );\n};\n","import Axios from 'axios';\nimport React, { useState } from 'react'\nimport { Button, Container, Form, Header, Icon, Image, Input, Modal, Segment, Statistic } from 'semantic-ui-react'\nimport {IStock}  from '../stocks/IStock'\n\n\nexport const Stocks = () => {\n\n    const [stock, setStock] = useState<IStock>();\n    const [open, setOpen] = useState(false);\n    const [ticker, setTicker] = useState(\"\");\n\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTicker(e.target.value)\n    }\n\n    const handleSubmit = (event: any) => {\n        event.preventDefault();\n        console.log(event);\n        Axios\n            .get<IStock>(process.env.REACT_APP_STOCK_URL! + ticker)\n            .then((response) => {\n                    console.log(response);\n                    setStock(response.data);\n                    setOpen(true);\n            })\n            .catch(err => {\n                if (err.response) {\n                    setOpen(false);\n                    alert(\"There are no results for \" + ticker);\n                }\n            });\n    };\n\n    return (\n        <Segment inverted textAlign='center' vertical className='stocks-background'>  \n            <Container text>\n                <Header\n                    inverted\n                    as='h1'\n                    content=\"Stocks.\"\n                    style={{\n                        fontSize: '4em',\n                        fontWeight: 'normal',\n                    }}\n                />\n                    <Form onSubmit={handleSubmit}>\n                    <Form.Field \n                    inline\n                    >\n                    <label>Stock Symbol: </label>\n                    <Input onChange={handleChange} name=\"ticker\" placeholder = 'Symbol' />\n                    <Modal\n                        onClose={() => setOpen(false)}\n                        onOpen={() => setOpen(true)}\n                        open = {open}\n                        trigger={<Button type=\"submit\" style={{margin: '0em 1em 0em'}}>Search</Button>}\n                    > \n                        <Modal.Header>{stock?.name}</Modal.Header>\n                        <Modal.Content image>\n                            <Image size=\"medium\" src={stock?.imageURL} wrapped />\n                            <Modal.Description>\n                                <Header>{stock?.ticker}</Header>\n                                <p>{stock?.description}</p>\n                                {stock?.previousClose! > stock?.currentPrice! ? <Icon name=\"angle double down\" size=\"huge\" color=\"red\"/> : <Icon name=\"angle double up\" size=\"huge\" color=\"green\" />}\n                                <Statistic centered>\n                                    <Statistic.Value>{stock?.currentPrice}</Statistic.Value>\n                                    <Statistic.Label>Current Price</Statistic.Label>\n                                </Statistic>\n                                <Statistic.Group>\n                                    <Statistic>\n                                        <Statistic.Value>{stock?.previousClose}</Statistic.Value>\n                                        <Statistic.Label>Previous Close</Statistic.Label>\n                                    </Statistic>\n                                    <Statistic>\n                                        <Statistic.Value>{stock?.yearHigh}</Statistic.Value>\n                                        <Statistic.Label>Year High</Statistic.Label>\n                                    </Statistic>\n                                    <Statistic>\n                                        <Statistic.Value>{stock?.yearLow}</Statistic.Value>\n                                        <Statistic.Label>Year Low</Statistic.Label>\n                                    </Statistic>\n                                </Statistic.Group> \n                            </Modal.Description>\n                        </Modal.Content>\n                        <Modal.Actions>\n                            <Button color='black' onClick={() => setOpen(false)}>Done</Button>\n                        </Modal.Actions>\n                    </Modal>\n                    </Form.Field>\n                    </Form>\n            </Container>\n        </Segment>  \n    )\n}\n","import Axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { Card, Container, Header, Icon, Segment, Statistic, Table } from 'semantic-ui-react';\nimport { ISP500 } from './ISP500';\n\nexport const SP500 = () => {\n\n    const [SP500obj, setSP500] = useState<ISP500>();\n\n    useEffect(() => {\n        Axios\n        .get<ISP500>(process.env.REACT_APP_SP500_URL!)\n        .then((response) => {\n            console.log(response.data)\n            setSP500(response.data)\n        });\n    }, []);\n    \n    return (\n        <Container fluid>\n            <Segment clearing centered>\n                <Header as='h1' dividing textAlign=\"center\">\n                    SP500\n                    <Header.Subheader>\n                        A mini-app for the SP500\n                    </Header.Subheader>\n                </Header>\n\n                <Header as='h2' dividing>\n                    Indexes\n                    <Header.Subheader>\n                        Indexes for the SP500, including SPY and VTI\n                    </Header.Subheader>\n                </Header>\n                \n                <Card.Group centered>\n                    {SP500obj?.indexes.map(index => (\n                        <Card>\n                            <Card.Content>\n                                <Card.Header>{index.ticker}</Card.Header>\n                                {index.changePercent < 0 ? <Icon name=\"angle double down\" size=\"huge\" color=\"red\"/> : <Icon name=\"angle double up\" size=\"huge\" color=\"green\" />}\n                                <Statistic >\n                                    <Statistic.Value>{index.currentPrice}</Statistic.Value>\n                                    <Statistic.Label>Current Price</Statistic.Label>\n                                </Statistic>\n\n                            </Card.Content>\n                        </Card>\n                    ))}\n                </Card.Group>\n \n                <Header as='h2' dividing>\n                    Components\n                    <Header.Subheader>\n                        The 505 companies that the SP500 consists of along with their current prices\n                    </Header.Subheader>\n                </Header>\n                    <Table celled fixed compact unstackable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell> Company </Table.HeaderCell>\n                            <Table.HeaderCell> Symbol </Table.HeaderCell>\n                            <Table.HeaderCell> Price </Table.HeaderCell>\n                            <Table.HeaderCell> Change Percent</Table.HeaderCell>\n                            <Table.HeaderCell> Previous Close </Table.HeaderCell>\n                            <Table.HeaderCell> Year High</Table.HeaderCell>\n                            <Table.HeaderCell> Year Low </Table.HeaderCell>\n                            <Table.HeaderCell> Market Cap </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {SP500obj?.stocks.map(stock => (\n                            <Table.Row>\n                                <Table.Cell>{stock.name}</Table.Cell>\n                                <Table.Cell>{stock.ticker}</Table.Cell>\n                                <Table.Cell className={stock.changePercent < 0 ? \"negative\" : \"positive\" }>{stock.changePercent < 0 ? <Icon name=\"angle double down\" size=\"small\" color=\"red\"/> : <Icon name=\"angle double up\" size=\"small\" color=\"green\" />}${stock.currentPrice.toFixed(2)}</Table.Cell>\n                                <Table.Cell className={stock.changePercent < 0 ? \"negative\" : \"positive\" }>{(stock.changePercent * 100).toFixed(2)} %</Table.Cell>\n                                <Table.Cell>${stock.previousClose.toFixed(2)}</Table.Cell>\n                                <Table.Cell>${stock.yearHigh.toFixed(2)}</Table.Cell>\n                                <Table.Cell>${stock.yearLow.toFixed(2)}</Table.Cell>\n                                <Table.Cell>${stock.marketCap.toLocaleString('en')}</Table.Cell>\n                            </Table.Row>\n                        ))}\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </Container>\n        \n    )\n}\n","import Axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { Card,Header, Icon, Statistic } from 'semantic-ui-react'\nimport {Container} from 'react-bootstrap'\nimport { ICoronaGraphData } from './ICoronaGraphData'\nimport 'react-vis/dist/style.css'\nimport {makeWidthFlexible, HorizontalGridLines, LineSeries, LineSeriesPoint, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis'\nimport { ICorona } from './ICorona';\n\n\n\n\nexport const Coronavirus = () => {\n    const [coronas, setCoronas] = useState<ICoronaGraphData>();\n    const [latestCases, setLatestCases] = useState<ICorona>();\n    const FlexibleXyPlot = makeWidthFlexible(XYPlot);\n    \n\n    useEffect(() => {\n        Axios\n            .get(\"https://api.covid19api.com/total/dayone/country/united-states\")\n            .then((response : any) => {\n                let confirmed : LineSeriesPoint[] = [];\n                let deaths : LineSeriesPoint[] = [];\n                let recovered : LineSeriesPoint[] = [];\n                let active : LineSeriesPoint[] = [];\n                response.data.forEach((e : ICorona)=> {\n                    confirmed.push({x : Date.parse(e.Date), y: e.Confirmed});\n                    deaths.push({x : Date.parse(e.Date), y: e.Deaths});\n                    recovered.push({x : Date.parse(e.Date), y: e.Recovered});\n                    active.push({x : Date.parse(e.Date), y: e.Active});\n                });\n                setCoronas({ConfirmedList: confirmed, DeathsList: deaths, RecoveredList: recovered, ActiveList: active});\n                setLatestCases(response.data.pop());\n            });\n        }, []\n    );\n    return (\n        <Container>\n            <div className=\"d-flex flex-column\">\n                <div className=\"p-2\">\n                <Header as='h1' dividing textAlign=\"center\" style={{paddingTop: \"10px\"}}>\n                    United States Coronavirus Cases\n                    <Header.Subheader>\n                        A web app showing current Coronavirus data in the United States\n                    </Header.Subheader>\n                </Header>\n                </div>\n            \n                <div className=\"className=p-2\">\n                    <FlexibleXyPlot\n                        xType=\"time\" \n                        height={350} \n                        width={600}\n                        margin={{left:65}\n                        \n                        }>\n                        \n                        <HorizontalGridLines />\n                        <VerticalGridLines />\n                        \n                        <XAxis title=\"Date\" />\n                        <YAxis title=\"# of Cases\"/>\n                        <LineSeries color=\"orange\" data={coronas?.ConfirmedList} />\n                        <LineSeries color=\"red\" data={coronas?.DeathsList} />\n                        <LineSeries color=\"green\" data={coronas?.RecoveredList} />\n                        <LineSeries color=\"black\" data={coronas?.ActiveList} />\n                    </FlexibleXyPlot>\n                </div>\n            \n            <Card.Group>\n                <Card>\n                    <Card.Content min-width=\"100em\">\n                        <Card.Header>Legend</Card.Header>\n                        <Header>\n                            <Icon name=\"circle\" color=\"orange\" size=\"huge\"/>\n                            Confirmed Cases\n                        </Header>   \n                        <Header>\n                            <Icon name=\"circle\" color=\"red\" size=\"huge\"/>\n                            Deaths\n                        </Header>\n                        <Header>\n                            <Icon name=\"circle\" color=\"green\" size=\"huge\"/>\n                            Recovered\n                        </Header>\n                        <Header>\n                            <Icon name=\"circle\" color=\"black\" size=\"huge\"/> \n                            Active\n                        </Header>\n                    </Card.Content>\n                </Card>\n\n                <Card style={{width: '25em'}}>\n                    <Card.Content >\n                        <Card.Header>Last Update: {latestCases?.Date}</Card.Header>\n                        <Statistic.Group horizontal>\n                            <Statistic color=\"black\">\n                                <Statistic.Value> {latestCases?.Active.toLocaleString()}</Statistic.Value>\n                                <Statistic.Label>Active</Statistic.Label>\n                            </Statistic>\n                            <Statistic color=\"orange\">\n                                <Statistic.Value>{latestCases?.Confirmed.toLocaleString()}</Statistic.Value>\n                                <Statistic.Label>Confirmed</Statistic.Label>\n                            </Statistic>\n                            <Statistic color=\"red\">\n                                <Statistic.Value>{latestCases?.Deaths.toLocaleString()}</Statistic.Value>\n                                <Statistic.Label>Deaths</Statistic.Label>\n                            </Statistic>\n                            <Statistic color=\"green\">\n                                <Statistic.Value>{latestCases?.Recovered.toLocaleString()}</Statistic.Value>\n                                <Statistic.Label>Recovered</Statistic.Label>\n                            </Statistic>\n                        </Statistic.Group>\n                    </Card.Content>\n                </Card>\n            </Card.Group>\n            </div>\n        </Container>\n            \n\n    )\n}\n","import React from 'react';\nimport {Container} from 'semantic-ui-react'\nimport {Route} from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Portfolio } from '../../features/portfolio/Portfolio';\nimport { Stocks } from '../../features/stocks/Stocks';\nimport { SP500 } from '../../features/sp500/SP500';\nimport { Coronavirus } from '../../features/coronavirus/Coronavirus';\n\n\n\nfunction App() {\n  \n  return (\n    <Container fluid>\n      <Route exact path='/' component={Portfolio} />\n      <Route exact path=\"/stocks\" component={Stocks} />\n      <Route exact path=\"/sp500\" component={SP500} />\n      <Route exact path=\"/corona\" component={Coronavirus} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}